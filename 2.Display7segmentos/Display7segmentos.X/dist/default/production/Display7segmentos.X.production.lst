

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Dec 07 20:41:19 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4550 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	idataCOMRAM
    54  007D74                     __pidataCOMRAM:
    55                           	callstack 0
    56                           
    57                           ;initializer for _display_array
    58  007D74  3F                 	db	63
    59  007D75  06                 	db	6
    60  007D76  5B                 	db	91
    61  007D77  4F                 	db	79
    62  007D78  66                 	db	102
    63  007D79  6D                 	db	109
    64  007D7A  7D                 	db	125
    65  007D7B  07                 	db	7
    66  007D7C  7F                 	db	127
    67  007D7D  6F                 	db	111
    68  0000                     _LATB	set	3978
    69  0000                     _LATD	set	3980
    70  0000                     _TRISD	set	3989
    71  0000                     _TRISB	set	3987
    72  0000                     _ADCON1	set	4033
    73                           
    74                           ; #config settings
    75                           
    76                           	psect	cinit
    77  007D98                     __pcinit:
    78                           	callstack 0
    79  007D98                     start_initialization:
    80                           	callstack 0
    81  007D98                     __initialization:
    82                           	callstack 0
    83                           
    84                           ; Initialize objects allocated to COMRAM (10 bytes)
    85                           ; load TBLPTR registers with __pidataCOMRAM
    86  007D98  0E74               	movlw	low __pidataCOMRAM
    87  007D9A  6EF6               	movwf	tblptrl,c
    88  007D9C  0E7D               	movlw	high __pidataCOMRAM
    89  007D9E  6EF7               	movwf	tblptrh,c
    90  007DA0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    91  007DA2  6EF8               	movwf	tblptru,c
    92  007DA4  EE00  F013         	lfsr	0,__pdataCOMRAM
    93  007DA8  EE10 F00A          	lfsr	1,10
    94  007DAC                     copy_data0:
    95  007DAC  0009               	tblrd		*+
    96  007DAE  CFF5 FFEE          	movff	tablat,postinc0
    97  007DB2  50E5               	movf	postdec1,w,c
    98  007DB4  50E1               	movf	fsr1l,w,c
    99  007DB6  E1FA               	bnz	copy_data0
   100  007DB8                     end_of_initialization:
   101                           	callstack 0
   102  007DB8                     __end_of__initialization:
   103                           	callstack 0
   104  007DB8  0100               	movlb	0
   105  007DBA  EFBF  F03E         	goto	_main	;jump to C main() function
   106                           
   107                           	psect	dataCOMRAM
   108  000013                     __pdataCOMRAM:
   109                           	callstack 0
   110  000013                     _display_array:
   111                           	callstack 0
   112  000013                     	ds	10
   113                           
   114                           	psect	cstackCOMRAM
   115  000001                     __pcstackCOMRAM:
   116                           	callstack 0
   117  000001                     ?___awdiv:
   118                           	callstack 0
   119  000001                     ?___awmod:
   120                           	callstack 0
   121  000001                     ___awdiv@dividend:
   122                           	callstack 0
   123  000001                     ___awmod@dividend:
   124                           	callstack 0
   125                           
   126                           ; 2 bytes @ 0x0
   127  000001                     	ds	2
   128  000003                     ___awdiv@divisor:
   129                           	callstack 0
   130  000003                     ___awmod@divisor:
   131                           	callstack 0
   132                           
   133                           ; 2 bytes @ 0x2
   134  000003                     	ds	2
   135  000005                     ___awdiv@counter:
   136                           	callstack 0
   137  000005                     ___awmod@counter:
   138                           	callstack 0
   139                           
   140                           ; 1 bytes @ 0x4
   141  000005                     	ds	1
   142  000006                     ___awdiv@sign:
   143                           	callstack 0
   144  000006                     ___awmod@sign:
   145                           	callstack 0
   146                           
   147                           ; 1 bytes @ 0x5
   148  000006                     	ds	1
   149  000007                     ___awdiv@quotient:
   150                           	callstack 0
   151                           
   152                           ; 2 bytes @ 0x6
   153  000007                     	ds	2
   154  000009                     ??_contador_decimal:
   155                           
   156                           ; 1 bytes @ 0x8
   157  000009                     	ds	3
   158  00000C                     contador_decimal@decenas:
   159                           	callstack 0
   160                           
   161                           ; 1 bytes @ 0xB
   162  00000C                     	ds	1
   163  00000D                     contador_decimal@unidades:
   164                           	callstack 0
   165                           
   166                           ; 1 bytes @ 0xC
   167  00000D                     	ds	1
   168  00000E                     contador_decimal@num_max:
   169                           	callstack 0
   170                           
   171                           ; 1 bytes @ 0xD
   172  00000E                     	ds	1
   173  00000F                     contador_decimal@d:
   174                           	callstack 0
   175                           
   176                           ; 2 bytes @ 0xE
   177  00000F                     	ds	2
   178  000011                     contador_decimal@u:
   179                           	callstack 0
   180                           
   181                           ; 2 bytes @ 0x10
   182  000011                     	ds	2
   183  000013                     
   184                           ; 1 bytes @ 0x12
   185 ;;
   186 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   187 ;;
   188 ;; *************** function _main *****************
   189 ;; Defined at:
   190 ;;		line 24 in file "main.c"
   191 ;; Parameters:    Size  Location     Type
   192 ;;		None
   193 ;; Auto vars:     Size  Location     Type
   194 ;;		None
   195 ;; Return value:  Size  Location     Type
   196 ;;                  1    wreg      void 
   197 ;; Registers used:
   198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   199 ;; Tracked objects:
   200 ;;		On entry : 0/0
   201 ;;		On exit  : 0/0
   202 ;;		Unchanged: 0/0
   203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   204 ;;      Params:         0       0       0       0       0       0       0       0       0
   205 ;;      Locals:         0       0       0       0       0       0       0       0       0
   206 ;;      Temps:          0       0       0       0       0       0       0       0       0
   207 ;;      Totals:         0       0       0       0       0       0       0       0       0
   208 ;;Total ram usage:        0 bytes
   209 ;; Hardware stack levels required when called: 2
   210 ;; This function calls:
   211 ;;		_contador_decimal
   212 ;; This function is called by:
   213 ;;		Startup code after reset
   214 ;; This function uses a non-reentrant model
   215 ;;
   216                           
   217                           	psect	text0
   218  007D7E                     __ptext0:
   219                           	callstack 0
   220  007D7E                     _main:
   221                           	callstack 29
   222  007D7E                     
   223                           ;main.c: 27:     ADCON1 = 0x0F;
   224  007D7E  0E0F               	movlw	15
   225  007D80  6EC1               	movwf	193,c	;volatile
   226                           
   227                           ;main.c: 29:     TRISB = 0;
   228  007D82  0E00               	movlw	0
   229  007D84  6E93               	movwf	147,c	;volatile
   230                           
   231                           ;main.c: 30:     TRISD = 0;
   232  007D86  0E00               	movlw	0
   233  007D88  6E95               	movwf	149,c	;volatile
   234  007D8A                     l931:
   235                           
   236                           ;main.c: 35:         contador_decimal(99);
   237  007D8A  0E63               	movlw	99
   238  007D8C  EC99  F03F         	call	_contador_decimal
   239  007D90  EFC5  F03E         	goto	l931
   240  007D94  EF00  F000         	goto	start
   241  007D98                     __end_of_main:
   242                           	callstack 0
   243                           
   244 ;; *************** function _contador_decimal *****************
   245 ;; Defined at:
   246 ;;		line 52 in file "main.c"
   247 ;; Parameters:    Size  Location     Type
   248 ;;  num_max         1    wreg     unsigned char 
   249 ;; Auto vars:     Size  Location     Type
   250 ;;  num_max         1   13[COMRAM] unsigned char 
   251 ;;  u               2   16[COMRAM] int 
   252 ;;  d               2   14[COMRAM] int 
   253 ;;  unidades        1   12[COMRAM] unsigned char 
   254 ;;  decenas         1   11[COMRAM] unsigned char 
   255 ;; Return value:  Size  Location     Type
   256 ;;                  1    wreg      void 
   257 ;; Registers used:
   258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   259 ;; Tracked objects:
   260 ;;		On entry : 0/0
   261 ;;		On exit  : 0/0
   262 ;;		Unchanged: 0/0
   263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   264 ;;      Params:         0       0       0       0       0       0       0       0       0
   265 ;;      Locals:         7       0       0       0       0       0       0       0       0
   266 ;;      Temps:          3       0       0       0       0       0       0       0       0
   267 ;;      Totals:        10       0       0       0       0       0       0       0       0
   268 ;;Total ram usage:       10 bytes
   269 ;; Hardware stack levels used: 1
   270 ;; Hardware stack levels required when called: 1
   271 ;; This function calls:
   272 ;;		___awdiv
   273 ;;		___awmod
   274 ;; This function is called by:
   275 ;;		_main
   276 ;; This function uses a non-reentrant model
   277 ;;
   278                           
   279                           	psect	text1
   280  007F32                     __ptext1:
   281                           	callstack 0
   282  007F32                     _contador_decimal:
   283                           	callstack 29
   284                           
   285                           ;incstack = 0
   286                           ;contador_decimal@num_max stored from wreg
   287  007F32  6E0E               	movwf	contador_decimal@num_max^0,c
   288  007F34                     
   289                           ;main.c: 54:     uint8_t decenas = num_max/10;
   290  007F34  C00E  F001         	movff	contador_decimal@num_max,___awdiv@dividend
   291  007F38  6A02               	clrf	(___awdiv@dividend+1)^0,c
   292  007F3A  0E00               	movlw	0
   293  007F3C  6E04               	movwf	(___awdiv@divisor+1)^0,c
   294  007F3E  0E0A               	movlw	10
   295  007F40  6E03               	movwf	___awdiv@divisor^0,c
   296  007F42  EC37  F03F         	call	___awdiv	;wreg free
   297  007F46  5001               	movf	?___awdiv^0,w,c
   298  007F48  6E0C               	movwf	contador_decimal@decenas^0,c
   299                           
   300                           ;main.c: 55:  uint8_t unidades = num_max%10;
   301  007F4A  C00E  F001         	movff	contador_decimal@num_max,___awmod@dividend
   302  007F4E  6A02               	clrf	(___awmod@dividend+1)^0,c
   303  007F50  0E00               	movlw	0
   304  007F52  6E04               	movwf	(___awmod@divisor+1)^0,c
   305  007F54  0E0A               	movlw	10
   306  007F56  6E03               	movwf	___awmod@divisor^0,c
   307  007F58  ECDF  F03E         	call	___awmod	;wreg free
   308  007F5C  5001               	movf	?___awmod^0,w,c
   309  007F5E  6E0D               	movwf	contador_decimal@unidades^0,c
   310  007F60                     
   311                           ;main.c: 57:     for(int d=0;d<=decenas;d++){
   312  007F60  0E00               	movlw	0
   313  007F62  6E10               	movwf	(contador_decimal@d+1)^0,c
   314  007F64  0E00               	movlw	0
   315  007F66  6E0F               	movwf	contador_decimal@d^0,c
   316  007F68  EFED  F03F         	goto	l927
   317  007F6C                     l913:
   318                           
   319                           ;main.c: 59:         LATB = display_array[d];
   320  007F6C  0E13               	movlw	low _display_array
   321  007F6E  240F               	addwf	contador_decimal@d^0,w,c
   322  007F70  6ED9               	movwf	fsr2l,c
   323  007F72  0E00               	movlw	high _display_array
   324  007F74  2010               	addwfc	(contador_decimal@d+1)^0,w,c
   325  007F76  6EDA               	movwf	fsr2h,c
   326  007F78  50DF               	movf	indf2,w,c
   327  007F7A  6E8A               	movwf	138,c	;volatile
   328  007F7C                     
   329                           ;main.c: 61:         for(int u=0;u<=unidades;u++){
   330  007F7C  0E00               	movlw	0
   331  007F7E  6E12               	movwf	(contador_decimal@u+1)^0,c
   332  007F80  0E00               	movlw	0
   333  007F82  6E11               	movwf	contador_decimal@u^0,c
   334  007F84  EFD9  F03F         	goto	l923
   335  007F88                     l917:
   336                           
   337                           ;main.c: 63:             LATD = display_array[u];
   338  007F88  0E13               	movlw	low _display_array
   339  007F8A  2411               	addwf	contador_decimal@u^0,w,c
   340  007F8C  6ED9               	movwf	fsr2l,c
   341  007F8E  0E00               	movlw	high _display_array
   342  007F90  2012               	addwfc	(contador_decimal@u+1)^0,w,c
   343  007F92  6EDA               	movwf	fsr2h,c
   344  007F94  50DF               	movf	indf2,w,c
   345  007F96  6E8C               	movwf	140,c	;volatile
   346  007F98                     
   347                           ;main.c: 64:             _delay((unsigned long)((500)*(8000000UL/4000.0)));
   348  007F98  0E06               	movlw	6
   349  007F9A  6E0A               	movwf	(??_contador_decimal+1)^0,c
   350  007F9C  0E13               	movlw	19
   351  007F9E  6E09               	movwf	??_contador_decimal^0,c
   352  007FA0  0EAE               	movlw	174
   353  007FA2                     u307:
   354  007FA2  2EE8               	decfsz	wreg,f,c
   355  007FA4  D7FE               	bra	u307
   356  007FA6  2E09               	decfsz	??_contador_decimal^0,f,c
   357  007FA8  D7FC               	bra	u307
   358  007FAA  2E0A               	decfsz	(??_contador_decimal+1)^0,f,c
   359  007FAC  D7FA               	bra	u307
   360  007FAE                     
   361                           ;main.c: 65:         }
   362  007FAE  4A11               	infsnz	contador_decimal@u^0,f,c
   363  007FB0  2A12               	incf	(contador_decimal@u+1)^0,f,c
   364  007FB2                     l923:
   365  007FB2  500D               	movf	contador_decimal@unidades^0,w,c
   366  007FB4  6E09               	movwf	??_contador_decimal^0,c
   367  007FB6  6A0A               	clrf	(??_contador_decimal+1)^0,c
   368  007FB8  5011               	movf	contador_decimal@u^0,w,c
   369  007FBA  5C09               	subwf	??_contador_decimal^0,w,c
   370  007FBC  500A               	movf	(??_contador_decimal+1)^0,w,c
   371  007FBE  0A80               	xorlw	128
   372  007FC0  6E0B               	movwf	(??_contador_decimal+2)^0,c
   373  007FC2  5012               	movf	(contador_decimal@u+1)^0,w,c
   374  007FC4  0A80               	xorlw	128
   375  007FC6  580B               	subwfb	(??_contador_decimal+2)^0,w,c
   376  007FC8  B0D8               	btfsc	status,0,c
   377  007FCA  EFE9  F03F         	goto	u281
   378  007FCE  EFEB  F03F         	goto	u280
   379  007FD2                     u281:
   380  007FD2  EFC4  F03F         	goto	l917
   381  007FD6                     u280:
   382  007FD6                     
   383                           ;main.c: 66:     }
   384  007FD6  4A0F               	infsnz	contador_decimal@d^0,f,c
   385  007FD8  2A10               	incf	(contador_decimal@d+1)^0,f,c
   386  007FDA                     l927:
   387  007FDA  500C               	movf	contador_decimal@decenas^0,w,c
   388  007FDC  6E09               	movwf	??_contador_decimal^0,c
   389  007FDE  6A0A               	clrf	(??_contador_decimal+1)^0,c
   390  007FE0  500F               	movf	contador_decimal@d^0,w,c
   391  007FE2  5C09               	subwf	??_contador_decimal^0,w,c
   392  007FE4  500A               	movf	(??_contador_decimal+1)^0,w,c
   393  007FE6  0A80               	xorlw	128
   394  007FE8  6E0B               	movwf	(??_contador_decimal+2)^0,c
   395  007FEA  5010               	movf	(contador_decimal@d+1)^0,w,c
   396  007FEC  0A80               	xorlw	128
   397  007FEE  580B               	subwfb	(??_contador_decimal+2)^0,w,c
   398  007FF0  B0D8               	btfsc	status,0,c
   399  007FF2  EFFD  F03F         	goto	u291
   400  007FF6  EFFF  F03F         	goto	u290
   401  007FFA                     u291:
   402  007FFA  EFB6  F03F         	goto	l913
   403  007FFE                     u290:
   404  007FFE  0012               	return		;funcret
   405  008000                     __end_of_contador_decimal:
   406                           	callstack 0
   407                           
   408 ;; *************** function ___awmod *****************
   409 ;; Defined at:
   410 ;;		line 7 in file "E:\MPLAB\pic\sources\c99\common\awmod.c"
   411 ;; Parameters:    Size  Location     Type
   412 ;;  dividend        2    0[COMRAM] int 
   413 ;;  divisor         2    2[COMRAM] int 
   414 ;; Auto vars:     Size  Location     Type
   415 ;;  sign            1    5[COMRAM] unsigned char 
   416 ;;  counter         1    4[COMRAM] unsigned char 
   417 ;; Return value:  Size  Location     Type
   418 ;;                  2    0[COMRAM] int 
   419 ;; Registers used:
   420 ;;		wreg, status,2, status,0
   421 ;; Tracked objects:
   422 ;;		On entry : 0/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   426 ;;      Params:         4       0       0       0       0       0       0       0       0
   427 ;;      Locals:         2       0       0       0       0       0       0       0       0
   428 ;;      Temps:          0       0       0       0       0       0       0       0       0
   429 ;;      Totals:         6       0       0       0       0       0       0       0       0
   430 ;;Total ram usage:        6 bytes
   431 ;; Hardware stack levels used: 1
   432 ;; This function calls:
   433 ;;		Nothing
   434 ;; This function is called by:
   435 ;;		_contador_decimal
   436 ;; This function uses a non-reentrant model
   437 ;;
   438                           
   439                           	psect	text2
   440  007DBE                     __ptext2:
   441                           	callstack 0
   442  007DBE                     ___awmod:
   443                           	callstack 29
   444  007DBE  0E00               	movlw	0
   445  007DC0  6E06               	movwf	___awmod@sign^0,c
   446  007DC2  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
   447  007DC4  EFE8  F03E         	goto	u220
   448  007DC8  EFE6  F03E         	goto	u221
   449  007DCC                     u221:
   450  007DCC  EFEE  F03E         	goto	l881
   451  007DD0                     u220:
   452  007DD0  6C01               	negf	___awmod@dividend^0,c
   453  007DD2  1E02               	comf	(___awmod@dividend+1)^0,f,c
   454  007DD4  B0D8               	btfsc	status,0,c
   455  007DD6  2A02               	incf	(___awmod@dividend+1)^0,f,c
   456  007DD8  0E01               	movlw	1
   457  007DDA  6E06               	movwf	___awmod@sign^0,c
   458  007DDC                     l881:
   459  007DDC  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
   460  007DDE  EFF5  F03E         	goto	u230
   461  007DE2  EFF3  F03E         	goto	u231
   462  007DE6                     u231:
   463  007DE6  EFF9  F03E         	goto	l885
   464  007DEA                     u230:
   465  007DEA  6C03               	negf	___awmod@divisor^0,c
   466  007DEC  1E04               	comf	(___awmod@divisor+1)^0,f,c
   467  007DEE  B0D8               	btfsc	status,0,c
   468  007DF0  2A04               	incf	(___awmod@divisor+1)^0,f,c
   469  007DF2                     l885:
   470  007DF2  5003               	movf	___awmod@divisor^0,w,c
   471  007DF4  1004               	iorwf	(___awmod@divisor+1)^0,w,c
   472  007DF6  B4D8               	btfsc	status,2,c
   473  007DF8  EF00  F03F         	goto	u241
   474  007DFC  EF02  F03F         	goto	u240
   475  007E00                     u241:
   476  007E00  EF26  F03F         	goto	l901
   477  007E04                     u240:
   478  007E04  0E01               	movlw	1
   479  007E06  6E05               	movwf	___awmod@counter^0,c
   480  007E08  EF0A  F03F         	goto	l891
   481  007E0C                     l889:
   482  007E0C  90D8               	bcf	status,0,c
   483  007E0E  3603               	rlcf	___awmod@divisor^0,f,c
   484  007E10  3604               	rlcf	(___awmod@divisor+1)^0,f,c
   485  007E12  2A05               	incf	___awmod@counter^0,f,c
   486  007E14                     l891:
   487  007E14  AE04               	btfss	(___awmod@divisor+1)^0,7,c
   488  007E16  EF0F  F03F         	goto	u251
   489  007E1A  EF11  F03F         	goto	u250
   490  007E1E                     u251:
   491  007E1E  EF06  F03F         	goto	l889
   492  007E22                     u250:
   493  007E22                     l893:
   494  007E22  5003               	movf	___awmod@divisor^0,w,c
   495  007E24  5C01               	subwf	___awmod@dividend^0,w,c
   496  007E26  5004               	movf	(___awmod@divisor+1)^0,w,c
   497  007E28  5802               	subwfb	(___awmod@dividend+1)^0,w,c
   498  007E2A  A0D8               	btfss	status,0,c
   499  007E2C  EF1A  F03F         	goto	u261
   500  007E30  EF1C  F03F         	goto	u260
   501  007E34                     u261:
   502  007E34  EF20  F03F         	goto	l897
   503  007E38                     u260:
   504  007E38  5003               	movf	___awmod@divisor^0,w,c
   505  007E3A  5E01               	subwf	___awmod@dividend^0,f,c
   506  007E3C  5004               	movf	(___awmod@divisor+1)^0,w,c
   507  007E3E  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
   508  007E40                     l897:
   509  007E40  90D8               	bcf	status,0,c
   510  007E42  3204               	rrcf	(___awmod@divisor+1)^0,f,c
   511  007E44  3203               	rrcf	___awmod@divisor^0,f,c
   512  007E46  2E05               	decfsz	___awmod@counter^0,f,c
   513  007E48  EF11  F03F         	goto	l893
   514  007E4C                     l901:
   515  007E4C  5006               	movf	___awmod@sign^0,w,c
   516  007E4E  B4D8               	btfsc	status,2,c
   517  007E50  EF2C  F03F         	goto	u271
   518  007E54  EF2E  F03F         	goto	u270
   519  007E58                     u271:
   520  007E58  EF32  F03F         	goto	l905
   521  007E5C                     u270:
   522  007E5C  6C01               	negf	___awmod@dividend^0,c
   523  007E5E  1E02               	comf	(___awmod@dividend+1)^0,f,c
   524  007E60  B0D8               	btfsc	status,0,c
   525  007E62  2A02               	incf	(___awmod@dividend+1)^0,f,c
   526  007E64                     l905:
   527  007E64  C001  F001         	movff	___awmod@dividend,?___awmod
   528  007E68  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
   529  007E6C  0012               	return		;funcret
   530  007E6E                     __end_of___awmod:
   531                           	callstack 0
   532                           
   533 ;; *************** function ___awdiv *****************
   534 ;; Defined at:
   535 ;;		line 7 in file "E:\MPLAB\pic\sources\c99\common\awdiv.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;  dividend        2    0[COMRAM] int 
   538 ;;  divisor         2    2[COMRAM] int 
   539 ;; Auto vars:     Size  Location     Type
   540 ;;  quotient        2    6[COMRAM] int 
   541 ;;  sign            1    5[COMRAM] unsigned char 
   542 ;;  counter         1    4[COMRAM] unsigned char 
   543 ;; Return value:  Size  Location     Type
   544 ;;                  2    0[COMRAM] int 
   545 ;; Registers used:
   546 ;;		wreg, status,2, status,0
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   552 ;;      Params:         4       0       0       0       0       0       0       0       0
   553 ;;      Locals:         4       0       0       0       0       0       0       0       0
   554 ;;      Temps:          0       0       0       0       0       0       0       0       0
   555 ;;      Totals:         8       0       0       0       0       0       0       0       0
   556 ;;Total ram usage:        8 bytes
   557 ;; Hardware stack levels used: 1
   558 ;; This function calls:
   559 ;;		Nothing
   560 ;; This function is called by:
   561 ;;		_contador_decimal
   562 ;; This function uses a non-reentrant model
   563 ;;
   564                           
   565                           	psect	text3
   566  007E6E                     __ptext3:
   567                           	callstack 0
   568  007E6E                     ___awdiv:
   569                           	callstack 29
   570  007E6E  0E00               	movlw	0
   571  007E70  6E06               	movwf	___awdiv@sign^0,c
   572  007E72  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   573  007E74  EF40  F03F         	goto	u160
   574  007E78  EF3E  F03F         	goto	u161
   575  007E7C                     u161:
   576  007E7C  EF46  F03F         	goto	l837
   577  007E80                     u160:
   578  007E80  6C03               	negf	___awdiv@divisor^0,c
   579  007E82  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   580  007E84  B0D8               	btfsc	status,0,c
   581  007E86  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   582  007E88  0E01               	movlw	1
   583  007E8A  6E06               	movwf	___awdiv@sign^0,c
   584  007E8C                     l837:
   585  007E8C  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   586  007E8E  EF4D  F03F         	goto	u170
   587  007E92  EF4B  F03F         	goto	u171
   588  007E96                     u171:
   589  007E96  EF53  F03F         	goto	l843
   590  007E9A                     u170:
   591  007E9A  6C01               	negf	___awdiv@dividend^0,c
   592  007E9C  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   593  007E9E  B0D8               	btfsc	status,0,c
   594  007EA0  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   595  007EA2  0E01               	movlw	1
   596  007EA4  1A06               	xorwf	___awdiv@sign^0,f,c
   597  007EA6                     l843:
   598  007EA6  0E00               	movlw	0
   599  007EA8  6E08               	movwf	(___awdiv@quotient+1)^0,c
   600  007EAA  0E00               	movlw	0
   601  007EAC  6E07               	movwf	___awdiv@quotient^0,c
   602  007EAE  5003               	movf	___awdiv@divisor^0,w,c
   603  007EB0  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   604  007EB2  B4D8               	btfsc	status,2,c
   605  007EB4  EF5E  F03F         	goto	u181
   606  007EB8  EF60  F03F         	goto	u180
   607  007EBC                     u181:
   608  007EBC  EF88  F03F         	goto	l865
   609  007EC0                     u180:
   610  007EC0  0E01               	movlw	1
   611  007EC2  6E05               	movwf	___awdiv@counter^0,c
   612  007EC4  EF68  F03F         	goto	l851
   613  007EC8                     l849:
   614  007EC8  90D8               	bcf	status,0,c
   615  007ECA  3603               	rlcf	___awdiv@divisor^0,f,c
   616  007ECC  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   617  007ECE  2A05               	incf	___awdiv@counter^0,f,c
   618  007ED0                     l851:
   619  007ED0  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   620  007ED2  EF6D  F03F         	goto	u191
   621  007ED6  EF6F  F03F         	goto	u190
   622  007EDA                     u191:
   623  007EDA  EF64  F03F         	goto	l849
   624  007EDE                     u190:
   625  007EDE                     l853:
   626  007EDE  90D8               	bcf	status,0,c
   627  007EE0  3607               	rlcf	___awdiv@quotient^0,f,c
   628  007EE2  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   629  007EE4  5003               	movf	___awdiv@divisor^0,w,c
   630  007EE6  5C01               	subwf	___awdiv@dividend^0,w,c
   631  007EE8  5004               	movf	(___awdiv@divisor+1)^0,w,c
   632  007EEA  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   633  007EEC  A0D8               	btfss	status,0,c
   634  007EEE  EF7B  F03F         	goto	u201
   635  007EF2  EF7D  F03F         	goto	u200
   636  007EF6                     u201:
   637  007EF6  EF82  F03F         	goto	l861
   638  007EFA                     u200:
   639  007EFA  5003               	movf	___awdiv@divisor^0,w,c
   640  007EFC  5E01               	subwf	___awdiv@dividend^0,f,c
   641  007EFE  5004               	movf	(___awdiv@divisor+1)^0,w,c
   642  007F00  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   643  007F02  8007               	bsf	___awdiv@quotient^0,0,c
   644  007F04                     l861:
   645  007F04  90D8               	bcf	status,0,c
   646  007F06  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   647  007F08  3203               	rrcf	___awdiv@divisor^0,f,c
   648  007F0A  2E05               	decfsz	___awdiv@counter^0,f,c
   649  007F0C  EF6F  F03F         	goto	l853
   650  007F10                     l865:
   651  007F10  5006               	movf	___awdiv@sign^0,w,c
   652  007F12  B4D8               	btfsc	status,2,c
   653  007F14  EF8E  F03F         	goto	u211
   654  007F18  EF90  F03F         	goto	u210
   655  007F1C                     u211:
   656  007F1C  EF94  F03F         	goto	l869
   657  007F20                     u210:
   658  007F20  6C07               	negf	___awdiv@quotient^0,c
   659  007F22  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   660  007F24  B0D8               	btfsc	status,0,c
   661  007F26  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   662  007F28                     l869:
   663  007F28  C007  F001         	movff	___awdiv@quotient,?___awdiv
   664  007F2C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   665  007F30  0012               	return		;funcret
   666  007F32                     __end_of___awdiv:
   667                           	callstack 0
   668  0000                     
   669                           	psect	rparam
   670  0000                     
   671                           	psect	idloc
   672                           
   673                           ;Config register IDLOC0 @ 0x200000
   674                           ;	unspecified, using default values
   675  200000                     	org	2097152
   676  200000  FF                 	db	255
   677                           
   678                           ;Config register IDLOC1 @ 0x200001
   679                           ;	unspecified, using default values
   680  200001                     	org	2097153
   681  200001  FF                 	db	255
   682                           
   683                           ;Config register IDLOC2 @ 0x200002
   684                           ;	unspecified, using default values
   685  200002                     	org	2097154
   686  200002  FF                 	db	255
   687                           
   688                           ;Config register IDLOC3 @ 0x200003
   689                           ;	unspecified, using default values
   690  200003                     	org	2097155
   691  200003  FF                 	db	255
   692                           
   693                           ;Config register IDLOC4 @ 0x200004
   694                           ;	unspecified, using default values
   695  200004                     	org	2097156
   696  200004  FF                 	db	255
   697                           
   698                           ;Config register IDLOC5 @ 0x200005
   699                           ;	unspecified, using default values
   700  200005                     	org	2097157
   701  200005  FF                 	db	255
   702                           
   703                           ;Config register IDLOC6 @ 0x200006
   704                           ;	unspecified, using default values
   705  200006                     	org	2097158
   706  200006  FF                 	db	255
   707                           
   708                           ;Config register IDLOC7 @ 0x200007
   709                           ;	unspecified, using default values
   710  200007                     	org	2097159
   711  200007  FF                 	db	255
   712                           
   713                           	psect	config
   714                           
   715                           ;Config register CONFIG1L @ 0x300000
   716                           ;	PLL Prescaler Selection bits
   717                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   718                           ;	System Clock Postscaler Selection bits
   719                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   720                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   721                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   722  300000                     	org	3145728
   723  300000  00                 	db	0
   724                           
   725                           ;Config register CONFIG1H @ 0x300001
   726                           ;	Oscillator Selection bits
   727                           ;	FOSC = XT_XT, XT oscillator (XT)
   728                           ;	Fail-Safe Clock Monitor Enable bit
   729                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   730                           ;	Internal/External Oscillator Switchover bit
   731                           ;	IESO = OFF, Oscillator Switchover mode disabled
   732  300001                     	org	3145729
   733  300001  00                 	db	0
   734                           
   735                           ;Config register CONFIG2L @ 0x300002
   736                           ;	Power-up Timer Enable bit
   737                           ;	PWRT = OFF, PWRT disabled
   738                           ;	Brown-out Reset Enable bits
   739                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   740                           ;	Brown-out Reset Voltage bits
   741                           ;	BORV = 3, Minimum setting 2.05V
   742                           ;	USB Voltage Regulator Enable bit
   743                           ;	VREGEN = OFF, USB voltage regulator disabled
   744  300002                     	org	3145730
   745  300002  19                 	db	25
   746                           
   747                           ;Config register CONFIG2H @ 0x300003
   748                           ;	Watchdog Timer Enable bit
   749                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   750                           ;	Watchdog Timer Postscale Select bits
   751                           ;	WDTPS = 32768, 1:32768
   752  300003                     	org	3145731
   753  300003  1E                 	db	30
   754                           
   755                           ; Padding undefined space
   756  300004                     	org	3145732
   757  300004  FF                 	db	255
   758                           
   759                           ;Config register CONFIG3H @ 0x300005
   760                           ;	CCP2 MUX bit
   761                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   762                           ;	PORTB A/D Enable bit
   763                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   764                           ;	Low-Power Timer 1 Oscillator Enable bit
   765                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   766                           ;	MCLR Pin Enable bit
   767                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   768  300005                     	org	3145733
   769  300005  83                 	db	131
   770                           
   771                           ;Config register CONFIG4L @ 0x300006
   772                           ;	Stack Full/Underflow Reset Enable bit
   773                           ;	STVREN = ON, Stack full/underflow will cause Reset
   774                           ;	Single-Supply ICSP Enable bit
   775                           ;	LVP = ON, Single-Supply ICSP enabled
   776                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   777                           ;	ICPRT = OFF, ICPORT disabled
   778                           ;	Extended Instruction Set Enable bit
   779                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   780                           ;	Background Debugger Enable bit
   781                           ;	DEBUG = 0x1, unprogrammed default
   782  300006                     	org	3145734
   783  300006  85                 	db	133
   784                           
   785                           ; Padding undefined space
   786  300007                     	org	3145735
   787  300007  FF                 	db	255
   788                           
   789                           ;Config register CONFIG5L @ 0x300008
   790                           ;	Code Protection bit
   791                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   792                           ;	Code Protection bit
   793                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   794                           ;	Code Protection bit
   795                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   796                           ;	Code Protection bit
   797                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   798  300008                     	org	3145736
   799  300008  0F                 	db	15
   800                           
   801                           ;Config register CONFIG5H @ 0x300009
   802                           ;	Boot Block Code Protection bit
   803                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   804                           ;	Data EEPROM Code Protection bit
   805                           ;	CPD = OFF, Data EEPROM is not code-protected
   806  300009                     	org	3145737
   807  300009  C0                 	db	192
   808                           
   809                           ;Config register CONFIG6L @ 0x30000A
   810                           ;	Write Protection bit
   811                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   812                           ;	Write Protection bit
   813                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   814                           ;	Write Protection bit
   815                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   816                           ;	Write Protection bit
   817                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   818  30000A                     	org	3145738
   819  30000A  0F                 	db	15
   820                           
   821                           ;Config register CONFIG6H @ 0x30000B
   822                           ;	Configuration Register Write Protection bit
   823                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   824                           ;	Boot Block Write Protection bit
   825                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   826                           ;	Data EEPROM Write Protection bit
   827                           ;	WRTD = OFF, Data EEPROM is not write-protected
   828  30000B                     	org	3145739
   829  30000B  E0                 	db	224
   830                           
   831                           ;Config register CONFIG7L @ 0x30000C
   832                           ;	Table Read Protection bit
   833                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   834                           ;	Table Read Protection bit
   835                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   836                           ;	Table Read Protection bit
   837                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   838                           ;	Table Read Protection bit
   839                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   840  30000C                     	org	3145740
   841  30000C  0F                 	db	15
   842                           
   843                           ;Config register CONFIG7H @ 0x30000D
   844                           ;	Boot Block Table Read Protection bit
   845                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   846  30000D                     	org	3145741
   847  30000D  40                 	db	64
   848                           tosu	equ	0xFFF
   849                           tosh	equ	0xFFE
   850                           tosl	equ	0xFFD
   851                           stkptr	equ	0xFFC
   852                           pclatu	equ	0xFFB
   853                           pclath	equ	0xFFA
   854                           pcl	equ	0xFF9
   855                           tblptru	equ	0xFF8
   856                           tblptrh	equ	0xFF7
   857                           tblptrl	equ	0xFF6
   858                           tablat	equ	0xFF5
   859                           prodh	equ	0xFF4
   860                           prodl	equ	0xFF3
   861                           indf0	equ	0xFEF
   862                           postinc0	equ	0xFEE
   863                           postdec0	equ	0xFED
   864                           preinc0	equ	0xFEC
   865                           plusw0	equ	0xFEB
   866                           fsr0h	equ	0xFEA
   867                           fsr0l	equ	0xFE9
   868                           wreg	equ	0xFE8
   869                           indf1	equ	0xFE7
   870                           postinc1	equ	0xFE6
   871                           postdec1	equ	0xFE5
   872                           preinc1	equ	0xFE4
   873                           plusw1	equ	0xFE3
   874                           fsr1h	equ	0xFE2
   875                           fsr1l	equ	0xFE1
   876                           bsr	equ	0xFE0
   877                           indf2	equ	0xFDF
   878                           postinc2	equ	0xFDE
   879                           postdec2	equ	0xFDD
   880                           preinc2	equ	0xFDC
   881                           plusw2	equ	0xFDB
   882                           fsr2h	equ	0xFDA
   883                           fsr2l	equ	0xFD9
   884                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     18      28
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_contador_decimal
    _contador_decimal->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1082
                   _contador_decimal
 ---------------------------------------------------------------------------------
 (1) _contador_decimal                                    10    10      0    1082
                                              8 COMRAM    10    10      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _contador_decimal
     ___awdiv
     ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     12      1C       1       29.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1C      20        0.0%
DATA                 0      0      1C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Dec 07 20:41:19 2021

                       l39 7FFE          contador_decimal@d 000F               ___awdiv@sign 0006  
        contador_decimal@u 0011                        l273 7F30                        l286 7E6C  
                      l901 7E4C                        l831 7E72                        l903 7E5C  
                      l911 7F60                        l841 7EA2                        l833 7E80  
                      l905 7E64                        l921 7FAE                        l913 7F6C  
                      l851 7ED0                        l843 7EA6                        l835 7E88  
                      l923 7FB2                        l915 7F7C                        l931 7D8A  
                      l861 7F04                        l853 7EDE                        l845 7EAE  
                      l837 7E8C                        l829 7E6E                        l925 7FD6  
                      l917 7F88                        l909 7F34                        l863 7F0A  
                      l855 7EE4                        l847 7EC0                        l839 7E9A  
                      l919 7F98                        l927 7FDA                        l857 7EFA  
                      l849 7EC8                        l865 7F10                        l881 7DDC  
                      l873 7DBE                        l929 7D7E                        l867 7F20  
                      l859 7F02                        l891 7E14                        l883 7DEA  
                      l875 7DC2                        l869 7F28                        l893 7E22  
                      l885 7DF2                        l877 7DD0                        l895 7E38  
                      l887 7E04                        l879 7DD8                        l897 7E40  
                      l889 7E0C                        l899 7E46                        u200 7EFA  
                      u201 7EF6                        u210 7F20                        u211 7F1C  
                      u220 7DD0                        u221 7DCC                        u230 7DEA  
                      u231 7DE6                        u160 7E80                        u240 7E04  
                      u161 7E7C                        u241 7E00                        u170 7E9A  
                      u250 7E22                        u171 7E96                        u251 7E1E  
                      u307 7FA2                        u180 7EC0                        u260 7E38  
                      u181 7EBC                        u261 7E34                        u190 7EDE  
                      u270 7E5C                        u191 7EDA                        u271 7E58  
                      u280 7FD6                        u281 7FD2                        u290 7FFE  
                      u291 7FFA               ___awmod@sign 0006                        wreg 000FE8  
                     _LATB 000F8A                       _LATD 000F8C                       _main 7D7E  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     start 0000               ___param_bank 000000                      ?_main 0001  
          __end_of___awdiv 7F32            __end_of___awmod 7E6E            ___awdiv@divisor 0003  
          ___awdiv@counter 0005                      _TRISB 000F93                      _TRISD 000F95  
                    tablat 000FF5                      status 000FD8            __initialization 7D98  
             __end_of_main 7D98                     ??_main 0013              __activetblptr 000000  
                   _ADCON1 000FC1           _contador_decimal 7F32           ___awdiv@dividend 0001  
                ??___awdiv 0005                  ??___awmod 0005           ___awdiv@quotient 0007  
          ___awmod@divisor 0003                     isa$std 000001            ___awmod@counter 0005  
             __pdataCOMRAM 0013                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                 __accesstop 0060    __end_of__initialization 7DB8  
            ___rparam_used 000001             __pcstackCOMRAM 0001                    __Hparam 0000  
                  __Lparam 0000                    ___awdiv 7E6E   __end_of_contador_decimal 8000  
                  ___awmod 7DBE                    __pcinit 7D98                    __ramtop 0800  
                  __ptext0 7D7E                    __ptext1 7F32                    __ptext2 7DBE  
                  __ptext3 7E6E           ___awmod@dividend 0001       end_of_initialization 7DB8  
                  postdec1 000FE5                    postinc0 000FEE              __pidataCOMRAM 7D74  
      start_initialization 7D98   contador_decimal@unidades 000D                   ?___awdiv 0001  
                 ?___awmod 0001          ?_contador_decimal 0001         ??_contador_decimal 0009  
                copy_data0 7DAC    contador_decimal@decenas 000C                   __Hrparam 0000  
                 __Lrparam 0000           __size_of___awdiv 00C4           __size_of___awmod 00B0  
  contador_decimal@num_max 000E              __size_of_main 001A                   isa$xinst 000000  
__size_of_contador_decimal 00CE              _display_array 0013  
