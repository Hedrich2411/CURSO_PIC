

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Dec 07 22:24:12 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4550 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _LATD	set	3980
    56  0000                     _TRISD	set	3989
    57  0000                     _ADCON1	set	4033
    58                           
    59                           	psect	smallconst
    60  000800                     __psmallconst:
    61                           	callstack 0
    62  000800  00                 	db	0
    63  000801                     STR_1:
    64  000801  48                 	db	72	;'H'
    65  000802  4F                 	db	79	;'O'
    66  000803  4C                 	db	76	;'L'
    67  000804  41                 	db	65	;'A'
    68  000805  20                 	db	32
    69  000806  51                 	db	81	;'Q'
    70  000807  55                 	db	85	;'U'
    71  000808  45                 	db	69	;'E'
    72  000809  20                 	db	32
    73  00080A  54                 	db	84	;'T'
    74  00080B  41                 	db	65	;'A'
    75  00080C  4C                 	db	76	;'L'
    76  00080D  00                 	db	0
    77  00080E                     STR_2:
    78  00080E  43                 	db	67	;'C'
    79  00080F  4F                 	db	79	;'O'
    80  000810  4D                 	db	77	;'M'
    81  000811  4F                 	db	79	;'O'
    82  000812  20                 	db	32
    83  000813  45                 	db	69	;'E'
    84  000814  53                 	db	83	;'S'
    85  000815  54                 	db	84	;'T'
    86  000816  41                 	db	65	;'A'
    87  000817  53                 	db	83	;'S'
    88  000818  00                 	db	0
    89  000819  00                 	db	0	; dummy byte at the end
    90  0000                     
    91                           ; #config settings
    92                           
    93                           	psect	cinit
    94  000A22                     __pcinit:
    95                           	callstack 0
    96  000A22                     start_initialization:
    97                           	callstack 0
    98  000A22                     __initialization:
    99                           	callstack 0
   100  000A22                     end_of_initialization:
   101                           	callstack 0
   102  000A22                     __end_of__initialization:
   103                           	callstack 0
   104  000A22  0E00               	movlw	low (__Lsmallconst shr (0+16))
   105  000A24  6EF8               	movwf	tblptru,c
   106  000A26  0E08               	movlw	high __Lsmallconst
   107  000A28  6EF7               	movwf	tblptrh,c
   108  000A2A  0100               	movlb	0
   109  000A2C  EFC8  F004         	goto	_main	;jump to C main() function
   110                           
   111                           	psect	cstackCOMRAM
   112  000001                     __pcstackCOMRAM:
   113                           	callstack 0
   114  000001                     LCD_Data@Data:
   115                           	callstack 0
   116                           
   117                           ; 1 bytes @ 0x0
   118  000001                     	ds	1
   119  000002                     LCD_Comand@cmd:
   120                           	callstack 0
   121  000002                     LCD_Caracter@Low4:
   122                           	callstack 0
   123                           
   124                           ; 1 bytes @ 0x1
   125  000002                     	ds	1
   126  000003                     ??_LCD_Init:
   127  000003                     LCD_Caracter@High4:
   128                           	callstack 0
   129  000003                     Set_Cursor@y:
   130                           	callstack 0
   131                           
   132                           ; 1 bytes @ 0x2
   133  000003                     	ds	1
   134  000004                     LCD_Caracter@data:
   135                           	callstack 0
   136  000004                     Set_Cursor@x:
   137                           	callstack 0
   138                           
   139                           ; 1 bytes @ 0x3
   140  000004                     	ds	1
   141  000005                     Set_Cursor@Low4:
   142                           	callstack 0
   143  000005                     LCD_String@caden:
   144                           	callstack 0
   145                           
   146                           ; 2 bytes @ 0x4
   147  000005                     	ds	1
   148  000006                     Set_Cursor@High4:
   149                           	callstack 0
   150                           
   151                           ; 1 bytes @ 0x5
   152  000006                     	ds	1
   153  000007                     Set_Cursor@Temp:
   154                           	callstack 0
   155                           
   156                           ; 1 bytes @ 0x6
   157  000007                     	ds	1
   158  000008                     
   159                           ; 1 bytes @ 0x7
   160 ;;
   161 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   162 ;;
   163 ;; *************** function _main *****************
   164 ;; Defined at:
   165 ;;		line 16 in file "main.c"
   166 ;; Parameters:    Size  Location     Type
   167 ;;		None
   168 ;; Auto vars:     Size  Location     Type
   169 ;;		None
   170 ;; Return value:  Size  Location     Type
   171 ;;                  1    wreg      void 
   172 ;; Registers used:
   173 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   174 ;; Tracked objects:
   175 ;;		On entry : 0/0
   176 ;;		On exit  : 0/0
   177 ;;		Unchanged: 0/0
   178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   179 ;;      Params:         0       0       0       0       0       0       0       0       0
   180 ;;      Locals:         0       0       0       0       0       0       0       0       0
   181 ;;      Temps:          0       0       0       0       0       0       0       0       0
   182 ;;      Totals:         0       0       0       0       0       0       0       0       0
   183 ;;Total ram usage:        0 bytes
   184 ;; Hardware stack levels required when called: 3
   185 ;; This function calls:
   186 ;;		_LCD_Init
   187 ;;		_LCD_String
   188 ;;		_LCD_clear
   189 ;;		_Set_Cursor
   190 ;; This function is called by:
   191 ;;		Startup code after reset
   192 ;; This function uses a non-reentrant model
   193 ;;
   194                           
   195                           	psect	text0
   196  000990                     __ptext0:
   197                           	callstack 0
   198  000990                     _main:
   199                           	callstack 28
   200  000990                     
   201                           ;main.c: 19:     ADCON1 = 0x0F;
   202  000990  0E0F               	movlw	15
   203  000992  6EC1               	movwf	193,c	;volatile
   204                           
   205                           ;main.c: 20:     TRISD = 0;
   206  000994  0E00               	movlw	0
   207  000996  6E95               	movwf	149,c	;volatile
   208  000998                     
   209                           ;main.c: 21:     LCD_Init();
   210  000998  EC0D  F004         	call	_LCD_Init	;wreg free
   211  00099C                     
   212                           ;main.c: 22:     LCD_clear();
   213  00099C  EC18  F005         	call	_LCD_clear	;wreg free
   214  0009A0                     
   215                           ;main.c: 23:     Set_Cursor(1,1);
   216  0009A0  0E01               	movlw	1
   217  0009A2  6E03               	movwf	Set_Cursor@y^0,c
   218  0009A4  0E01               	movlw	1
   219  0009A6  EC45  F004         	call	_Set_Cursor
   220  0009AA                     
   221                           ;main.c: 24:     LCD_String("HOLA QUE TAL");
   222  0009AA  0E01               	movlw	low STR_1
   223  0009AC  6E05               	movwf	LCD_String@caden^0,c
   224  0009AE  0E08               	movlw	high STR_1
   225  0009B0  6E06               	movwf	(LCD_String@caden+1)^0,c
   226  0009B2  ECEA  F004         	call	_LCD_String	;wreg free
   227  0009B6                     
   228                           ;main.c: 25:     Set_Cursor(2,1);
   229  0009B6  0E01               	movlw	1
   230  0009B8  6E03               	movwf	Set_Cursor@y^0,c
   231  0009BA  0E02               	movlw	2
   232  0009BC  EC45  F004         	call	_Set_Cursor
   233  0009C0                     
   234                           ;main.c: 26:     LCD_String("COMO ESTAS");
   235  0009C0  0E0E               	movlw	low STR_2
   236  0009C2  6E05               	movwf	LCD_String@caden^0,c
   237  0009C4  0E08               	movlw	high STR_2
   238  0009C6  6E06               	movwf	(LCD_String@caden+1)^0,c
   239  0009C8  ECEA  F004         	call	_LCD_String	;wreg free
   240  0009CC                     l17:
   241  0009CC  EFE6  F004         	goto	l17
   242  0009D0  EF00  F000         	goto	start
   243  0009D4                     __end_of_main:
   244                           	callstack 0
   245                           
   246 ;; *************** function _Set_Cursor *****************
   247 ;; Defined at:
   248 ;;		line 84 in file "lcd_pic.c"
   249 ;; Parameters:    Size  Location     Type
   250 ;;  x               1    wreg     unsigned char 
   251 ;;  y               1    2[COMRAM] unsigned char 
   252 ;; Auto vars:     Size  Location     Type
   253 ;;  x               1    3[COMRAM] unsigned char 
   254 ;;  Temp            1    6[COMRAM] unsigned char 
   255 ;;  High4           1    5[COMRAM] unsigned char 
   256 ;;  Low4            1    4[COMRAM] unsigned char 
   257 ;; Return value:  Size  Location     Type
   258 ;;                  1    wreg      void 
   259 ;; Registers used:
   260 ;;		wreg, status,2, status,0, cstack
   261 ;; Tracked objects:
   262 ;;		On entry : 0/0
   263 ;;		On exit  : 0/0
   264 ;;		Unchanged: 0/0
   265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   266 ;;      Params:         1       0       0       0       0       0       0       0       0
   267 ;;      Locals:         4       0       0       0       0       0       0       0       0
   268 ;;      Temps:          0       0       0       0       0       0       0       0       0
   269 ;;      Totals:         5       0       0       0       0       0       0       0       0
   270 ;;Total ram usage:        5 bytes
   271 ;; Hardware stack levels used: 1
   272 ;; Hardware stack levels required when called: 2
   273 ;; This function calls:
   274 ;;		_LCD_Comand
   275 ;; This function is called by:
   276 ;;		_main
   277 ;; This function uses a non-reentrant model
   278 ;;
   279                           
   280                           	psect	text1
   281  00088A                     __ptext1:
   282                           	callstack 0
   283  00088A                     _Set_Cursor:
   284                           	callstack 28
   285                           
   286                           ;incstack = 0
   287                           ;Set_Cursor@x stored from wreg
   288  00088A  6E04               	movwf	Set_Cursor@x^0,c
   289  00088C                     
   290                           ;lcd_pic.c: 86:     unsigned char Temp,Low4,High4;;lcd_pic.c: 88:     if(x==1){
   291  00088C  0404               	decf	Set_Cursor@x^0,w,c
   292  00088E  A4D8               	btfss	status,2,c
   293  000890  EF4C  F004         	goto	u81
   294  000894  EF4E  F004         	goto	u80
   295  000898                     u81:
   296  000898  EF5D  F004         	goto	l57
   297  00089C                     u80:
   298  00089C                     
   299                           ;lcd_pic.c: 90:         Temp=0x80+y-1;
   300  00089C  5003               	movf	Set_Cursor@y^0,w,c
   301  00089E  0F7F               	addlw	127
   302  0008A0  6E07               	movwf	Set_Cursor@Temp^0,c
   303                           
   304                           ;lcd_pic.c: 91:         High4=Temp>>4;
   305  0008A2  3807               	swapf	Set_Cursor@Temp^0,w,c
   306  0008A4  0B0F               	andlw	15
   307  0008A6  6E06               	movwf	Set_Cursor@High4^0,c
   308                           
   309                           ;lcd_pic.c: 92:         Low4=Temp&0x0F;
   310  0008A8  5007               	movf	Set_Cursor@Temp^0,w,c
   311  0008AA  0B0F               	andlw	15
   312  0008AC  6E05               	movwf	Set_Cursor@Low4^0,c
   313  0008AE                     
   314                           ;lcd_pic.c: 93:         LCD_Comand(High4);
   315  0008AE  5006               	movf	Set_Cursor@High4^0,w,c
   316  0008B0  EC05  F005         	call	_LCD_Comand
   317  0008B4                     
   318                           ;lcd_pic.c: 94:         LCD_Comand(Low4);
   319  0008B4  5005               	movf	Set_Cursor@Low4^0,w,c
   320  0008B6  EC05  F005         	call	_LCD_Comand
   321  0008BA                     l57:
   322                           
   323                           ;lcd_pic.c: 98:     if(x==2){
   324  0008BA  0E02               	movlw	2
   325  0008BC  1804               	xorwf	Set_Cursor@x^0,w,c
   326  0008BE  A4D8               	btfss	status,2,c
   327  0008C0  EF64  F004         	goto	u91
   328  0008C4  EF66  F004         	goto	u90
   329  0008C8                     u91:
   330  0008C8  EF75  F004         	goto	l59
   331  0008CC                     u90:
   332  0008CC                     
   333                           ;lcd_pic.c: 100:         Temp=0xC0+y-1;
   334  0008CC  5003               	movf	Set_Cursor@y^0,w,c
   335  0008CE  0FBF               	addlw	191
   336  0008D0  6E07               	movwf	Set_Cursor@Temp^0,c
   337                           
   338                           ;lcd_pic.c: 101:         High4=Temp>>4;
   339  0008D2  3807               	swapf	Set_Cursor@Temp^0,w,c
   340  0008D4  0B0F               	andlw	15
   341  0008D6  6E06               	movwf	Set_Cursor@High4^0,c
   342                           
   343                           ;lcd_pic.c: 102:         Low4=Temp&0x0F;
   344  0008D8  5007               	movf	Set_Cursor@Temp^0,w,c
   345  0008DA  0B0F               	andlw	15
   346  0008DC  6E05               	movwf	Set_Cursor@Low4^0,c
   347  0008DE                     
   348                           ;lcd_pic.c: 103:         LCD_Comand(High4);
   349  0008DE  5006               	movf	Set_Cursor@High4^0,w,c
   350  0008E0  EC05  F005         	call	_LCD_Comand
   351  0008E4                     
   352                           ;lcd_pic.c: 104:         LCD_Comand(Low4);
   353  0008E4  5005               	movf	Set_Cursor@Low4^0,w,c
   354  0008E6  EC05  F005         	call	_LCD_Comand
   355  0008EA                     l59:
   356  0008EA  0012               	return		;funcret
   357  0008EC                     __end_of_Set_Cursor:
   358                           	callstack 0
   359                           
   360 ;; *************** function _LCD_clear *****************
   361 ;; Defined at:
   362 ;;		line 109 in file "lcd_pic.c"
   363 ;; Parameters:    Size  Location     Type
   364 ;;		None
   365 ;; Auto vars:     Size  Location     Type
   366 ;;		None
   367 ;; Return value:  Size  Location     Type
   368 ;;                  1    wreg      void 
   369 ;; Registers used:
   370 ;;		wreg, status,2, status,0, cstack
   371 ;; Tracked objects:
   372 ;;		On entry : 0/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   376 ;;      Params:         0       0       0       0       0       0       0       0       0
   377 ;;      Locals:         0       0       0       0       0       0       0       0       0
   378 ;;      Temps:          0       0       0       0       0       0       0       0       0
   379 ;;      Totals:         0       0       0       0       0       0       0       0       0
   380 ;;Total ram usage:        0 bytes
   381 ;; Hardware stack levels used: 1
   382 ;; Hardware stack levels required when called: 2
   383 ;; This function calls:
   384 ;;		_LCD_Comand
   385 ;; This function is called by:
   386 ;;		_main
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390                           	psect	text2
   391  000A30                     __ptext2:
   392                           	callstack 0
   393  000A30                     _LCD_clear:
   394                           	callstack 28
   395  000A30                     
   396                           ;lcd_pic.c: 111:     LCD_Comand(0);
   397  000A30  0E00               	movlw	0
   398  000A32  EC05  F005         	call	_LCD_Comand
   399                           
   400                           ;lcd_pic.c: 112:     LCD_Comand(1);
   401  000A36  0E01               	movlw	1
   402  000A38  EC05  F005         	call	_LCD_Comand
   403  000A3C  0012               	return		;funcret
   404  000A3E                     __end_of_LCD_clear:
   405                           	callstack 0
   406                           
   407 ;; *************** function _LCD_String *****************
   408 ;; Defined at:
   409 ;;		line 77 in file "lcd_pic.c"
   410 ;; Parameters:    Size  Location     Type
   411 ;;  caden           2    4[COMRAM] PTR const unsigned char 
   412 ;;		 -> STR_2(11), STR_1(13), 
   413 ;; Auto vars:     Size  Location     Type
   414 ;;		None
   415 ;; Return value:  Size  Location     Type
   416 ;;                  1    wreg      void 
   417 ;; Registers used:
   418 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   419 ;; Tracked objects:
   420 ;;		On entry : 0/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   424 ;;      Params:         2       0       0       0       0       0       0       0       0
   425 ;;      Locals:         0       0       0       0       0       0       0       0       0
   426 ;;      Temps:          0       0       0       0       0       0       0       0       0
   427 ;;      Totals:         2       0       0       0       0       0       0       0       0
   428 ;;Total ram usage:        2 bytes
   429 ;; Hardware stack levels used: 1
   430 ;; Hardware stack levels required when called: 2
   431 ;; This function calls:
   432 ;;		_LCD_Caracter
   433 ;; This function is called by:
   434 ;;		_main
   435 ;; This function uses a non-reentrant model
   436 ;;
   437                           
   438                           	psect	text3
   439  0009D4                     __ptext3:
   440                           	callstack 0
   441  0009D4                     _LCD_String:
   442                           	callstack 28
   443  0009D4                     
   444                           ;lcd_pic.c: 79:     while(*caden)
   445  0009D4  EFF6  F004         	goto	l878
   446  0009D8                     l874:
   447                           
   448                           ;lcd_pic.c: 80:         LCD_Caracter(*caden++);
   449  0009D8  C005  FFF6         	movff	LCD_String@caden,tblptrl
   450  0009DC  C006  FFF7         	movff	LCD_String@caden+1,tblptrh
   451  0009E0                     	if	0	;tblptru may be non-zero
   452  0009E0                     	endif
   453  0009E0                     	if	0	;tblptru may be non-zero
   454  0009E0                     	endif
   455  0009E0  0008               	tblrd		*
   456  0009E2  50F5               	movf	tablat,w,c
   457  0009E4  ECA4  F004         	call	_LCD_Caracter
   458  0009E8  4A05               	infsnz	LCD_String@caden^0,f,c
   459  0009EA  2A06               	incf	(LCD_String@caden+1)^0,f,c
   460  0009EC                     l878:
   461                           
   462                           ;lcd_pic.c: 79:     while(*caden)
   463  0009EC  C005  FFF6         	movff	LCD_String@caden,tblptrl
   464  0009F0  C006  FFF7         	movff	LCD_String@caden+1,tblptrh
   465  0009F4                     	if	0	;tblptru may be non-zero
   466  0009F4                     	endif
   467  0009F4                     	if	0	;tblptru may be non-zero
   468  0009F4                     	endif
   469  0009F4  0008               	tblrd		*
   470  0009F6  50F5               	movf	tablat,w,c
   471  0009F8  0900               	iorlw	0
   472  0009FA  A4D8               	btfss	status,2,c
   473  0009FC  EF02  F005         	goto	u101
   474  000A00  EF04  F005         	goto	u100
   475  000A04                     u101:
   476  000A04  EFEC  F004         	goto	l874
   477  000A08                     u100:
   478  000A08  0012               	return		;funcret
   479  000A0A                     __end_of_LCD_String:
   480                           	callstack 0
   481                           
   482 ;; *************** function _LCD_Caracter *****************
   483 ;; Defined at:
   484 ;;		line 59 in file "lcd_pic.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;  data            1    wreg     unsigned char 
   487 ;; Auto vars:     Size  Location     Type
   488 ;;  data            1    3[COMRAM] unsigned char 
   489 ;;  High4           1    2[COMRAM] unsigned char 
   490 ;;  Low4            1    1[COMRAM] unsigned char 
   491 ;; Return value:  Size  Location     Type
   492 ;;                  1    wreg      void 
   493 ;; Registers used:
   494 ;;		wreg, status,2, status,0, cstack
   495 ;; Tracked objects:
   496 ;;		On entry : 0/0
   497 ;;		On exit  : 0/0
   498 ;;		Unchanged: 0/0
   499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   500 ;;      Params:         0       0       0       0       0       0       0       0       0
   501 ;;      Locals:         3       0       0       0       0       0       0       0       0
   502 ;;      Temps:          0       0       0       0       0       0       0       0       0
   503 ;;      Totals:         3       0       0       0       0       0       0       0       0
   504 ;;Total ram usage:        3 bytes
   505 ;; Hardware stack levels used: 1
   506 ;; Hardware stack levels required when called: 1
   507 ;; This function calls:
   508 ;;		_LCD_Data
   509 ;; This function is called by:
   510 ;;		_LCD_String
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514                           	psect	text4
   515  000948                     __ptext4:
   516                           	callstack 0
   517  000948                     _LCD_Caracter:
   518                           	callstack 28
   519                           
   520                           ;incstack = 0
   521                           ;LCD_Caracter@data stored from wreg
   522  000948  6E04               	movwf	LCD_Caracter@data^0,c
   523  00094A                     
   524                           ;lcd_pic.c: 61:     char Low4,High4;;lcd_pic.c: 62:     Low4=data & 0x0F;
   525  00094A  5004               	movf	LCD_Caracter@data^0,w,c
   526  00094C  0B0F               	andlw	15
   527  00094E  6E02               	movwf	LCD_Caracter@Low4^0,c
   528                           
   529                           ;lcd_pic.c: 63:     High4=data & 0xF0;
   530  000950  5004               	movf	LCD_Caracter@data^0,w,c
   531  000952  0BF0               	andlw	240
   532  000954  6E03               	movwf	LCD_Caracter@High4^0,c
   533  000956                     
   534                           ;lcd_pic.c: 64:     LATD|=(1<<4);
   535  000956  888C               	bsf	140,4,c	;volatile
   536  000958                     
   537                           ;lcd_pic.c: 65:     LCD_Data(High4>>4);
   538  000958  3803               	swapf	LCD_Caracter@High4^0,w,c
   539  00095A  0B0F               	andlw	15
   540  00095C  EC76  F004         	call	_LCD_Data
   541  000960                     
   542                           ;lcd_pic.c: 66:     LATD|=(1<<5);
   543  000960  8A8C               	bsf	140,5,c	;volatile
   544  000962                     
   545                           ;lcd_pic.c: 67:     _delay((unsigned long)((500)*(8000000UL/4000000.0)));
   546  000962  0EC8               	movlw	200
   547  000964                     u117:
   548  000964  D000               	nop2	
   549  000966  2EE8               	decfsz	wreg,f,c
   550  000968  D7FD               	bra	u117
   551  00096A                     
   552                           ;lcd_pic.c: 68:     LATD&=~(1<<5);
   553  00096A  9A8C               	bcf	140,5,c	;volatile
   554  00096C                     
   555                           ;lcd_pic.c: 69:     _delay((unsigned long)((500)*(8000000UL/4000000.0)));
   556  00096C  0EC8               	movlw	200
   557  00096E                     u127:
   558  00096E  D000               	nop2	
   559  000970  2EE8               	decfsz	wreg,f,c
   560  000972  D7FD               	bra	u127
   561  000974                     
   562                           ;lcd_pic.c: 70:     LCD_Data(Low4);
   563  000974  5002               	movf	LCD_Caracter@Low4^0,w,c
   564  000976  EC76  F004         	call	_LCD_Data
   565  00097A                     
   566                           ;lcd_pic.c: 71:     LATD|=(1<<5);
   567  00097A  8A8C               	bsf	140,5,c	;volatile
   568  00097C                     
   569                           ;lcd_pic.c: 72:     _delay((unsigned long)((500)*(8000000UL/4000000.0)));
   570  00097C  0EC8               	movlw	200
   571  00097E                     u137:
   572  00097E  D000               	nop2	
   573  000980  2EE8               	decfsz	wreg,f,c
   574  000982  D7FD               	bra	u137
   575                           
   576                           ;lcd_pic.c: 73:     LATD&=~(1<<5);
   577  000984  9A8C               	bcf	140,5,c	;volatile
   578  000986                     
   579                           ;lcd_pic.c: 74:     _delay((unsigned long)((500)*(8000000UL/4000000.0)));
   580  000986  0EC8               	movlw	200
   581  000988                     u147:
   582  000988  D000               	nop2	
   583  00098A  2EE8               	decfsz	wreg,f,c
   584  00098C  D7FD               	bra	u147
   585  00098E  0012               	return		;funcret
   586  000990                     __end_of_LCD_Caracter:
   587                           	callstack 0
   588                           
   589 ;; *************** function _LCD_Init *****************
   590 ;; Defined at:
   591 ;;		line 5 in file "lcd_pic.c"
   592 ;; Parameters:    Size  Location     Type
   593 ;;		None
   594 ;; Auto vars:     Size  Location     Type
   595 ;;		None
   596 ;; Return value:  Size  Location     Type
   597 ;;                  1    wreg      void 
   598 ;; Registers used:
   599 ;;		wreg, status,2, status,0, cstack
   600 ;; Tracked objects:
   601 ;;		On entry : 0/0
   602 ;;		On exit  : 0/0
   603 ;;		Unchanged: 0/0
   604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   605 ;;      Params:         0       0       0       0       0       0       0       0       0
   606 ;;      Locals:         0       0       0       0       0       0       0       0       0
   607 ;;      Temps:          1       0       0       0       0       0       0       0       0
   608 ;;      Totals:         1       0       0       0       0       0       0       0       0
   609 ;;Total ram usage:        1 bytes
   610 ;; Hardware stack levels used: 1
   611 ;; Hardware stack levels required when called: 2
   612 ;; This function calls:
   613 ;;		_LCD_Comand
   614 ;;		_LCD_Data
   615 ;; This function is called by:
   616 ;;		_main
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620                           	psect	text5
   621  00081A                     __ptext5:
   622                           	callstack 0
   623  00081A                     _LCD_Init:
   624                           	callstack 28
   625  00081A                     
   626                           ;lcd_pic.c: 7:     LCD_Data(0x00);
   627  00081A  0E00               	movlw	0
   628  00081C  EC76  F004         	call	_LCD_Data
   629  000820                     
   630                           ;lcd_pic.c: 8:     _delay((unsigned long)((30)*(8000000UL/4000.0)));
   631  000820  0E4E               	movlw	78
   632  000822  6E03               	movwf	??_LCD_Init^0,c
   633  000824  0EEB               	movlw	235
   634  000826                     u157:
   635  000826  2EE8               	decfsz	wreg,f,c
   636  000828  D7FE               	bra	u157
   637  00082A  2E03               	decfsz	??_LCD_Init^0,f,c
   638  00082C  D7FC               	bra	u157
   639  00082E  F000               	nop	
   640  000830                     
   641                           ;lcd_pic.c: 9:     _delay((unsigned long)((500)*(8000000UL/4000000.0)));
   642  000830  0EC8               	movlw	200
   643  000832                     u167:
   644  000832  D000               	nop2	
   645  000834  2EE8               	decfsz	wreg,f,c
   646  000836  D7FD               	bra	u167
   647                           
   648                           ;lcd_pic.c: 10:     LCD_Comand(0x03);
   649  000838  0E03               	movlw	3
   650  00083A  EC05  F005         	call	_LCD_Comand
   651  00083E                     
   652                           ;lcd_pic.c: 11:     _delay((unsigned long)((5)*(8000000UL/4000.0)));
   653  00083E  0E0D               	movlw	13
   654  000840  6E03               	movwf	??_LCD_Init^0,c
   655  000842  0EFC               	movlw	252
   656  000844                     u177:
   657  000844  2EE8               	decfsz	wreg,f,c
   658  000846  D7FE               	bra	u177
   659  000848  2E03               	decfsz	??_LCD_Init^0,f,c
   660  00084A  D7FC               	bra	u177
   661  00084C                     
   662                           ;lcd_pic.c: 12:     LCD_Comand(0x03);
   663  00084C  0E03               	movlw	3
   664  00084E  EC05  F005         	call	_LCD_Comand
   665                           
   666                           ;lcd_pic.c: 13:     _delay((unsigned long)((150)*(8000000UL/4000000.0)));
   667  000852  0E64               	movlw	100
   668  000854                     u187:
   669  000854  2EE8               	decfsz	wreg,f,c
   670  000856  D7FE               	bra	u187
   671  000858                     
   672                           ;lcd_pic.c: 14:     LCD_Comand(0x03);
   673  000858  0E03               	movlw	3
   674  00085A  EC05  F005         	call	_LCD_Comand
   675  00085E                     
   676                           ;lcd_pic.c: 15:     LCD_Comand(0x02);
   677  00085E  0E02               	movlw	2
   678  000860  EC05  F005         	call	_LCD_Comand
   679  000864                     
   680                           ;lcd_pic.c: 16:     LCD_Comand(0x02);
   681  000864  0E02               	movlw	2
   682  000866  EC05  F005         	call	_LCD_Comand
   683  00086A                     
   684                           ;lcd_pic.c: 17:     LCD_Comand(0x08);
   685  00086A  0E08               	movlw	8
   686  00086C  EC05  F005         	call	_LCD_Comand
   687  000870                     
   688                           ;lcd_pic.c: 18:     LCD_Comand(0x00);
   689  000870  0E00               	movlw	0
   690  000872  EC05  F005         	call	_LCD_Comand
   691  000876                     
   692                           ;lcd_pic.c: 19:     LCD_Comand(0x0C);
   693  000876  0E0C               	movlw	12
   694  000878  EC05  F005         	call	_LCD_Comand
   695  00087C                     
   696                           ;lcd_pic.c: 20:     LCD_Comand(0x00);
   697  00087C  0E00               	movlw	0
   698  00087E  EC05  F005         	call	_LCD_Comand
   699  000882                     
   700                           ;lcd_pic.c: 21:     LCD_Comand(0x06);
   701  000882  0E06               	movlw	6
   702  000884  EC05  F005         	call	_LCD_Comand
   703  000888  0012               	return		;funcret
   704  00088A                     __end_of_LCD_Init:
   705                           	callstack 0
   706                           
   707 ;; *************** function _LCD_Comand *****************
   708 ;; Defined at:
   709 ;;		line 48 in file "lcd_pic.c"
   710 ;; Parameters:    Size  Location     Type
   711 ;;  cmd             1    wreg     unsigned char 
   712 ;; Auto vars:     Size  Location     Type
   713 ;;  cmd             1    1[COMRAM] unsigned char 
   714 ;; Return value:  Size  Location     Type
   715 ;;                  1    wreg      void 
   716 ;; Registers used:
   717 ;;		wreg, status,2, status,0, cstack
   718 ;; Tracked objects:
   719 ;;		On entry : 0/0
   720 ;;		On exit  : 0/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   723 ;;      Params:         0       0       0       0       0       0       0       0       0
   724 ;;      Locals:         1       0       0       0       0       0       0       0       0
   725 ;;      Temps:          0       0       0       0       0       0       0       0       0
   726 ;;      Totals:         1       0       0       0       0       0       0       0       0
   727 ;;Total ram usage:        1 bytes
   728 ;; Hardware stack levels used: 1
   729 ;; Hardware stack levels required when called: 1
   730 ;; This function calls:
   731 ;;		_LCD_Data
   732 ;; This function is called by:
   733 ;;		_LCD_Init
   734 ;;		_Set_Cursor
   735 ;;		_LCD_clear
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739                           	psect	text6
   740  000A0A                     __ptext6:
   741                           	callstack 0
   742  000A0A                     _LCD_Comand:
   743                           	callstack 28
   744                           
   745                           ;incstack = 0
   746                           ;LCD_Comand@cmd stored from wreg
   747  000A0A  6E02               	movwf	LCD_Comand@cmd^0,c
   748  000A0C                     
   749                           ;lcd_pic.c: 50:     LATD&=~(1<<4);
   750  000A0C  988C               	bcf	140,4,c	;volatile
   751  000A0E                     
   752                           ;lcd_pic.c: 51:     LCD_Data(cmd);
   753  000A0E  5002               	movf	LCD_Comand@cmd^0,w,c
   754  000A10  EC76  F004         	call	_LCD_Data
   755  000A14                     
   756                           ;lcd_pic.c: 52:     LATD|=(1<<5);
   757  000A14  8A8C               	bsf	140,5,c	;volatile
   758  000A16                     
   759                           ;lcd_pic.c: 53:     _delay((unsigned long)((500)*(8000000UL/4000000.0)));
   760  000A16  0EC8               	movlw	200
   761  000A18                     u197:
   762  000A18  D000               	nop2	
   763  000A1A  2EE8               	decfsz	wreg,f,c
   764  000A1C  D7FD               	bra	u197
   765  000A1E                     
   766                           ;lcd_pic.c: 54:     LATD&=~(1<<5);
   767  000A1E  9A8C               	bcf	140,5,c	;volatile
   768  000A20  0012               	return		;funcret
   769  000A22                     __end_of_LCD_Comand:
   770                           	callstack 0
   771                           
   772 ;; *************** function _LCD_Data *****************
   773 ;; Defined at:
   774 ;;		line 26 in file "lcd_pic.c"
   775 ;; Parameters:    Size  Location     Type
   776 ;;  Data            1    wreg     unsigned char 
   777 ;; Auto vars:     Size  Location     Type
   778 ;;  Data            1    0[COMRAM] unsigned char 
   779 ;; Return value:  Size  Location     Type
   780 ;;                  1    wreg      void 
   781 ;; Registers used:
   782 ;;		wreg, status,2, status,0
   783 ;; Tracked objects:
   784 ;;		On entry : 0/0
   785 ;;		On exit  : 0/0
   786 ;;		Unchanged: 0/0
   787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   788 ;;      Params:         0       0       0       0       0       0       0       0       0
   789 ;;      Locals:         1       0       0       0       0       0       0       0       0
   790 ;;      Temps:          0       0       0       0       0       0       0       0       0
   791 ;;      Totals:         1       0       0       0       0       0       0       0       0
   792 ;;Total ram usage:        1 bytes
   793 ;; Hardware stack levels used: 1
   794 ;; This function calls:
   795 ;;		Nothing
   796 ;; This function is called by:
   797 ;;		_LCD_Init
   798 ;;		_LCD_Comand
   799 ;;		_LCD_Caracter
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803                           	psect	text7
   804  0008EC                     __ptext7:
   805                           	callstack 0
   806  0008EC                     _LCD_Data:
   807                           	callstack 28
   808                           
   809                           ;incstack = 0
   810                           ;LCD_Data@Data stored from wreg
   811  0008EC  6E01               	movwf	LCD_Data@Data^0,c
   812  0008EE                     
   813                           ;lcd_pic.c: 28:   if(Data & 1)
   814  0008EE  A001               	btfss	LCD_Data@Data^0,0,c
   815  0008F0  EF7C  F004         	goto	u11
   816  0008F4  EF7E  F004         	goto	u10
   817  0008F8                     u11:
   818  0008F8  EF81  F004         	goto	l742
   819  0008FC                     u10:
   820  0008FC                     
   821                           ;lcd_pic.c: 29:     LATD|=(1<<0);
   822  0008FC  808C               	bsf	140,0,c	;volatile
   823  0008FE  EF82  F004         	goto	l744
   824  000902                     l742:
   825                           
   826                           ;lcd_pic.c: 31:     LATD&=~(1<<0);
   827  000902  908C               	bcf	140,0,c	;volatile
   828  000904                     l744:
   829                           
   830                           ;lcd_pic.c: 32:   if(Data & 2)
   831  000904  A201               	btfss	LCD_Data@Data^0,1,c
   832  000906  EF87  F004         	goto	u21
   833  00090A  EF89  F004         	goto	u20
   834  00090E                     u21:
   835  00090E  EF8C  F004         	goto	l748
   836  000912                     u20:
   837  000912                     
   838                           ;lcd_pic.c: 33:     LATD|=(1<<1);
   839  000912  828C               	bsf	140,1,c	;volatile
   840  000914  EF8D  F004         	goto	l750
   841  000918                     l748:
   842                           
   843                           ;lcd_pic.c: 35:     LATD&=~(1<<1);
   844  000918  928C               	bcf	140,1,c	;volatile
   845  00091A                     l750:
   846                           
   847                           ;lcd_pic.c: 36:   if(Data & 4)
   848  00091A  A401               	btfss	LCD_Data@Data^0,2,c
   849  00091C  EF92  F004         	goto	u31
   850  000920  EF94  F004         	goto	u30
   851  000924                     u31:
   852  000924  EF97  F004         	goto	l754
   853  000928                     u30:
   854  000928                     
   855                           ;lcd_pic.c: 37:     LATD|=(1<<2);
   856  000928  848C               	bsf	140,2,c	;volatile
   857  00092A  EF98  F004         	goto	l756
   858  00092E                     l754:
   859                           
   860                           ;lcd_pic.c: 39:     LATD&=~(1<<2);
   861  00092E  948C               	bcf	140,2,c	;volatile
   862  000930                     l756:
   863                           
   864                           ;lcd_pic.c: 40:   if(Data & 8)
   865  000930  A601               	btfss	LCD_Data@Data^0,3,c
   866  000932  EF9D  F004         	goto	u41
   867  000936  EF9F  F004         	goto	u40
   868  00093A                     u41:
   869  00093A  EFA2  F004         	goto	l760
   870  00093E                     u40:
   871  00093E                     
   872                           ;lcd_pic.c: 41:     LATD|=(1<<3);
   873  00093E  868C               	bsf	140,3,c	;volatile
   874  000940  EFA3  F004         	goto	l42
   875  000944                     l760:
   876                           
   877                           ;lcd_pic.c: 43:     LATD&=~(1<<3);
   878  000944  968C               	bcf	140,3,c	;volatile
   879  000946                     l42:
   880  000946  0012               	return		;funcret
   881  000948                     __end_of_LCD_Data:
   882                           	callstack 0
   883                           
   884                           	psect	rparam
   885  0000                     
   886                           	psect	idloc
   887                           
   888                           ;Config register IDLOC0 @ 0x200000
   889                           ;	unspecified, using default values
   890  200000                     	org	2097152
   891  200000  FF                 	db	255
   892                           
   893                           ;Config register IDLOC1 @ 0x200001
   894                           ;	unspecified, using default values
   895  200001                     	org	2097153
   896  200001  FF                 	db	255
   897                           
   898                           ;Config register IDLOC2 @ 0x200002
   899                           ;	unspecified, using default values
   900  200002                     	org	2097154
   901  200002  FF                 	db	255
   902                           
   903                           ;Config register IDLOC3 @ 0x200003
   904                           ;	unspecified, using default values
   905  200003                     	org	2097155
   906  200003  FF                 	db	255
   907                           
   908                           ;Config register IDLOC4 @ 0x200004
   909                           ;	unspecified, using default values
   910  200004                     	org	2097156
   911  200004  FF                 	db	255
   912                           
   913                           ;Config register IDLOC5 @ 0x200005
   914                           ;	unspecified, using default values
   915  200005                     	org	2097157
   916  200005  FF                 	db	255
   917                           
   918                           ;Config register IDLOC6 @ 0x200006
   919                           ;	unspecified, using default values
   920  200006                     	org	2097158
   921  200006  FF                 	db	255
   922                           
   923                           ;Config register IDLOC7 @ 0x200007
   924                           ;	unspecified, using default values
   925  200007                     	org	2097159
   926  200007  FF                 	db	255
   927                           
   928                           	psect	config
   929                           
   930                           ;Config register CONFIG1L @ 0x300000
   931                           ;	PLL Prescaler Selection bits
   932                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   933                           ;	System Clock Postscaler Selection bits
   934                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   935                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   936                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   937  300000                     	org	3145728
   938  300000  00                 	db	0
   939                           
   940                           ;Config register CONFIG1H @ 0x300001
   941                           ;	Oscillator Selection bits
   942                           ;	FOSC = HS, HS oscillator (HS)
   943                           ;	Fail-Safe Clock Monitor Enable bit
   944                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   945                           ;	Internal/External Oscillator Switchover bit
   946                           ;	IESO = OFF, Oscillator Switchover mode disabled
   947  300001                     	org	3145729
   948  300001  0C                 	db	12
   949                           
   950                           ;Config register CONFIG2L @ 0x300002
   951                           ;	Power-up Timer Enable bit
   952                           ;	PWRT = OFF, PWRT disabled
   953                           ;	Brown-out Reset Enable bits
   954                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   955                           ;	Brown-out Reset Voltage bits
   956                           ;	BORV = 3, Minimum setting 2.05V
   957                           ;	USB Voltage Regulator Enable bit
   958                           ;	VREGEN = OFF, USB voltage regulator disabled
   959  300002                     	org	3145730
   960  300002  19                 	db	25
   961                           
   962                           ;Config register CONFIG2H @ 0x300003
   963                           ;	Watchdog Timer Enable bit
   964                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   965                           ;	Watchdog Timer Postscale Select bits
   966                           ;	WDTPS = 32768, 1:32768
   967  300003                     	org	3145731
   968  300003  1E                 	db	30
   969                           
   970                           ; Padding undefined space
   971  300004                     	org	3145732
   972  300004  FF                 	db	255
   973                           
   974                           ;Config register CONFIG3H @ 0x300005
   975                           ;	CCP2 MUX bit
   976                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   977                           ;	PORTB A/D Enable bit
   978                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   979                           ;	Low-Power Timer 1 Oscillator Enable bit
   980                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   981                           ;	MCLR Pin Enable bit
   982                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   983  300005                     	org	3145733
   984  300005  83                 	db	131
   985                           
   986                           ;Config register CONFIG4L @ 0x300006
   987                           ;	Stack Full/Underflow Reset Enable bit
   988                           ;	STVREN = ON, Stack full/underflow will cause Reset
   989                           ;	Single-Supply ICSP Enable bit
   990                           ;	LVP = ON, Single-Supply ICSP enabled
   991                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   992                           ;	ICPRT = OFF, ICPORT disabled
   993                           ;	Extended Instruction Set Enable bit
   994                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   995                           ;	Background Debugger Enable bit
   996                           ;	DEBUG = 0x1, unprogrammed default
   997  300006                     	org	3145734
   998  300006  85                 	db	133
   999                           
  1000                           ; Padding undefined space
  1001  300007                     	org	3145735
  1002  300007  FF                 	db	255
  1003                           
  1004                           ;Config register CONFIG5L @ 0x300008
  1005                           ;	Code Protection bit
  1006                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1007                           ;	Code Protection bit
  1008                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1009                           ;	Code Protection bit
  1010                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1011                           ;	Code Protection bit
  1012                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1013  300008                     	org	3145736
  1014  300008  0F                 	db	15
  1015                           
  1016                           ;Config register CONFIG5H @ 0x300009
  1017                           ;	Boot Block Code Protection bit
  1018                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1019                           ;	Data EEPROM Code Protection bit
  1020                           ;	CPD = OFF, Data EEPROM is not code-protected
  1021  300009                     	org	3145737
  1022  300009  C0                 	db	192
  1023                           
  1024                           ;Config register CONFIG6L @ 0x30000A
  1025                           ;	Write Protection bit
  1026                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1027                           ;	Write Protection bit
  1028                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1029                           ;	Write Protection bit
  1030                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1031                           ;	Write Protection bit
  1032                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1033  30000A                     	org	3145738
  1034  30000A  0F                 	db	15
  1035                           
  1036                           ;Config register CONFIG6H @ 0x30000B
  1037                           ;	Configuration Register Write Protection bit
  1038                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1039                           ;	Boot Block Write Protection bit
  1040                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1041                           ;	Data EEPROM Write Protection bit
  1042                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1043  30000B                     	org	3145739
  1044  30000B  E0                 	db	224
  1045                           
  1046                           ;Config register CONFIG7L @ 0x30000C
  1047                           ;	Table Read Protection bit
  1048                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1049                           ;	Table Read Protection bit
  1050                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1051                           ;	Table Read Protection bit
  1052                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1053                           ;	Table Read Protection bit
  1054                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1055  30000C                     	org	3145740
  1056  30000C  0F                 	db	15
  1057                           
  1058                           ;Config register CONFIG7H @ 0x30000D
  1059                           ;	Boot Block Table Read Protection bit
  1060                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1061  30000D                     	org	3145741
  1062  30000D  40                 	db	64
  1063                           tosu	equ	0xFFF
  1064                           tosh	equ	0xFFE
  1065                           tosl	equ	0xFFD
  1066                           stkptr	equ	0xFFC
  1067                           pclatu	equ	0xFFB
  1068                           pclath	equ	0xFFA
  1069                           pcl	equ	0xFF9
  1070                           tblptru	equ	0xFF8
  1071                           tblptrh	equ	0xFF7
  1072                           tblptrl	equ	0xFF6
  1073                           tablat	equ	0xFF5
  1074                           prodh	equ	0xFF4
  1075                           prodl	equ	0xFF3
  1076                           indf0	equ	0xFEF
  1077                           postinc0	equ	0xFEE
  1078                           postdec0	equ	0xFED
  1079                           preinc0	equ	0xFEC
  1080                           plusw0	equ	0xFEB
  1081                           fsr0h	equ	0xFEA
  1082                           fsr0l	equ	0xFE9
  1083                           wreg	equ	0xFE8
  1084                           indf1	equ	0xFE7
  1085                           postinc1	equ	0xFE6
  1086                           postdec1	equ	0xFE5
  1087                           preinc1	equ	0xFE4
  1088                           plusw1	equ	0xFE3
  1089                           fsr1h	equ	0xFE2
  1090                           fsr1l	equ	0xFE1
  1091                           bsr	equ	0xFE0
  1092                           indf2	equ	0xFDF
  1093                           postinc2	equ	0xFDE
  1094                           postdec2	equ	0xFDD
  1095                           preinc2	equ	0xFDC
  1096                           plusw2	equ	0xFDB
  1097                           fsr2h	equ	0xFDA
  1098                           fsr2l	equ	0xFD9
  1099                           status	equ	0xFD8

Data Sizes:
    Strings     24
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      7       7
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    LCD_String@caden	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_2(CODE[11]), STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_Set_Cursor
    _Set_Cursor->_LCD_Comand
    _LCD_clear->_LCD_Comand
    _LCD_String->_LCD_Caracter
    _LCD_Caracter->_LCD_Data
    _LCD_Init->_LCD_Comand
    _LCD_Comand->_LCD_Data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1024
                           _LCD_Init
                         _LCD_String
                          _LCD_clear
                         _Set_Cursor
 ---------------------------------------------------------------------------------
 (1) _Set_Cursor                                           5     4      1     497
                                              2 COMRAM     5     4      1
                         _LCD_Comand
 ---------------------------------------------------------------------------------
 (1) _LCD_clear                                            0     0      0      75
                         _LCD_Comand
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           2     0      2     317
                                              4 COMRAM     2     0      2
                       _LCD_Caracter
 ---------------------------------------------------------------------------------
 (2) _LCD_Caracter                                         3     3      0     120
                                              1 COMRAM     3     3      0
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     135
                                              2 COMRAM     1     1      0
                         _LCD_Comand
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (2) _LCD_Comand                                           1     1      0      75
                                              1 COMRAM     1     1      0
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (3) _LCD_Data                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Comand
       _LCD_Data
     _LCD_Data
   _LCD_String
     _LCD_Caracter
       _LCD_Data
   _LCD_clear
     _LCD_Comand
   _Set_Cursor
     _LCD_Comand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      7       7       1        7.4%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Dec 07 22:24:12 2021

            ?_LCD_Comand 0001            ?_LCD_Caracter 0001                       l31 0888  
                     l17 09CC                       l42 0946                       l18 09CC  
                     l45 0A20                       l54 0A08                       l62 0A3C  
                     l48 098E                       l57 08BA                       l59 08EA  
                     u10 08FC                       u11 08F8                       u20 0912  
                     u21 090E                       u30 0928                       u31 0924  
                     u40 093E                       u41 093A                       u80 089C  
                     u81 0898                       u90 08CC                       u91 08C8  
            ?_LCD_String 0005                      l800 083E                      l810 086A  
                    l802 084C                      l740 08FC                      l812 0870  
                    l804 0858                      l820 0A30                      l750 091A  
                    l742 0902                      l814 0876                      l806 085E  
                    l760 0944                      l752 0928                      l744 0904  
                    l816 087C                      l808 0864                      l754 092E  
                    l746 0912                      l738 08EE                      l770 0A1E  
                    l762 0A0C                      l818 0882                      l756 0930  
                    l748 0918                      l764 0A0E                      l780 0962  
                    l772 094A                      l860 089C                      l758 093E  
                    l766 0A14                      l790 097C                      l782 096A  
                    l774 0956                      l870 08E4                      l862 08AE  
                    l768 0A16                      l792 0986                      l784 096C  
                    l776 0958                      l872 09D4                      l864 08B4  
                    l880 0990                      l794 081A                      l786 0974  
                    l778 0960                      l874 09D8                      l866 08CC  
                    l858 088C                      l890 09B6                      l882 0998  
                    l796 0820                      l788 097A                      l876 09E8  
                    l868 08DE                      l892 09C0                      l884 099C  
                    l798 0830                      l878 09EC                      l886 09A0  
                    l888 09AA                      u100 0A08                      u101 0A04  
                    u117 0964                      u127 096E                      u137 097E  
                    u147 0988                      u157 0826                      u167 0832  
                    u177 0844                      u187 0854                      u197 0A18  
                    wreg 000FE8                     STR_1 0801                     STR_2 080E  
                   _LATD 000F8C                     _main 0990                     start 0000  
     __size_of_LCD_clear 000E             ___param_bank 000000           ??_LCD_Caracter 0002  
           LCD_Data@Data 0001         __end_of_LCD_Data 0948         __end_of_LCD_Init 088A  
                  ?_main 0001                    _TRISD 000F95      __size_of_LCD_Comand 0018  
                  tablat 000FF5                    status 000FD8      __size_of_LCD_String 0036  
        __initialization 0A22             __end_of_main 09D4                   ??_main 0008  
          __activetblptr 000001        __end_of_LCD_clear 0A3E                   _ADCON1 000FC1  
             _Set_Cursor 088A            LCD_Comand@cmd 0002                   isa$std 000001  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8     __end_of_LCD_Caracter 0990                ?_LCD_Data 0001  
             __accesstop 0060  __end_of__initialization 0A22                ?_LCD_Init 0001  
          ___rparam_used 000001           __pcstackCOMRAM 0001             ??_LCD_Comand 0002  
           ??_LCD_String 0007              Set_Cursor@x 0004              Set_Cursor@y 0003  
         Set_Cursor@Low4 0005           Set_Cursor@Temp 0007       __end_of_LCD_Comand 0A22  
            ?_Set_Cursor 0003               ??_LCD_Data 0001               ??_LCD_Init 0003  
     __end_of_LCD_String 0A0A         LCD_Caracter@Low4 0002         LCD_Caracter@data 0004  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0800  
                __pcinit 0A22                  __ramtop 0800      __size_of_Set_Cursor 0062  
                __ptext0 0990                  __ptext1 088A                  __ptext2 0A30  
                __ptext3 09D4                  __ptext4 0948                  __ptext5 081A  
                __ptext6 0A0A                  __ptext7 08EC    __size_of_LCD_Caracter 0048  
              _LCD_clear 0A30     end_of_initialization 0A22             _LCD_Caracter 0948  
             ?_LCD_clear 0001        __size_of_LCD_Data 005C        __size_of_LCD_Init 0070  
    start_initialization 0A22          LCD_String@caden 0005             ??_Set_Cursor 0004  
        Set_Cursor@High4 0006       __end_of_Set_Cursor 08EC              ??_LCD_clear 0003  
            __smallconst 0800        LCD_Caracter@High4 0003                 _LCD_Data 08EC  
               _LCD_Init 081A                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0800            __size_of_main 0044                 isa$xinst 000000  
             _LCD_Comand 0A0A               _LCD_String 09D4  
